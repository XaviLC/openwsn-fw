diff a/kernel/openos/scheduler.c b/kernel/openos/scheduler.c	(rejected hunks)
@@ -10,6 +10,11 @@
 #include "debugpins.h"
 #include "leds.h"
 
+#include "thread.h"
+
+#define ENABLE_DEBUG (0)
+#include "debug.h"
+
 //=========================== variables =======================================
 
 scheduler_vars_t scheduler_vars;
@@ -18,14 +23,13 @@ scheduler_dbg_t  scheduler_dbg;
 //=========================== prototypes ======================================
 
 void consumeTask(uint8_t taskId);
-
-//=========================== public ==========================================
-
+
+//=========================== public ==========================================
+
 void scheduler_init(void) {
-   
-   // initialization module variables
-   memset(&scheduler_vars,0,sizeof(scheduler_vars_t));
-   memset(&scheduler_dbg,0,sizeof(scheduler_dbg_t));
+   // initialization module variables
+   memset(&scheduler_vars,0,sizeof(scheduler_vars_t));
+   memset(&scheduler_dbg,0,sizeof(scheduler_dbg_t));
    
    // enable the scheduler's interrupt so SW can wake up the scheduler
    SCHEDULER_ENABLE_INTERRUPT();
@@ -53,7 +57,8 @@ void scheduler_start(void) {
          scheduler_dbg.numTasksCur--;
       }
       debugpins_task_clr();
-      board_sleep();
+      // board_sleep();
+      thread_yield();
       debugpins_task_set();                      // IAR should halt here if nothing to do
    }
 }
@@ -63,6 +68,7 @@ void scheduler_start(void) {
    taskList_item_t** taskListWalker;
    INTERRUPT_DECLARATION();
    
+   DEBUG("owsn scheduler: push back task %p.\n", cb);
    DISABLE_INTERRUPTS();
    
    // find an empty task container
