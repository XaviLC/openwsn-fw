diff a/drivers/common/openserial.c b/drivers/common/openserial.c	(rejected hunks)
@@ -1,48 +1,48 @@
-/**
-\brief Definition of the "openserial" driver.
-
-\author Fabien Chraim <chraim@eecs.berkeley.edu>, March 2012.
-*/
-
-#include "opendefs.h"
-#include "openserial.h"
-#include "IEEE802154E.h"
-#include "neighbors.h"
-#include "sixtop.h"
-#include "icmpv6echo.h"
-#include "idmanager.h"
-#include "openqueue.h"
-#include "openbridge.h"
-#include "leds.h"
-#include "schedule.h"
-#include "uart.h"
-#include "opentimers.h"
-#include "openhdlc.h"
-
-//=========================== variables =======================================
-
-openserial_vars_t openserial_vars;
-
-//=========================== prototypes ======================================
-
-owerror_t openserial_printInfoErrorCritical(
-   char             severity,
-   uint8_t          calling_component,
-   uint8_t          error_code,
-   errorparameter_t arg1,
-   errorparameter_t arg2
-);
-// HDLC output
-void outputHdlcOpen(void);
-void outputHdlcWrite(uint8_t b);
-void outputHdlcClose(void);
-// HDLC input
-void inputHdlcOpen(void);
-void inputHdlcWrite(uint8_t b);
-void inputHdlcClose(void);
-
-//=========================== public ==========================================
-
+/**
+\brief Definition of the "openserial" driver.
+
+\author Fabien Chraim <chraim@eecs.berkeley.edu>, March 2012.
+*/
+
+#include "opendefs.h"
+#include "openserial.h"
+#include "IEEE802154E.h"
+#include "neighbors.h"
+#include "sixtop.h"
+#include "icmpv6echo.h"
+#include "idmanager.h"
+#include "openqueue.h"
+#include "openbridge.h"
+#include "leds.h"
+#include "schedule.h"
+#include "uart.h"
+#include "opentimers.h"
+#include "openhdlc.h"
+
+//=========================== variables =======================================
+
+openserial_vars_t openserial_vars;
+
+//=========================== prototypes ======================================
+
+owerror_t openserial_printInfoErrorCritical(
+   char             severity,
+   uint8_t          calling_component,
+   uint8_t          error_code,
+   errorparameter_t arg1,
+   errorparameter_t arg2
+);
+// HDLC output
+void outputHdlcOpen(void);
+void outputHdlcWrite(uint8_t b);
+void outputHdlcClose(void);
+// HDLC input
+void inputHdlcOpen(void);
+void inputHdlcWrite(uint8_t b);
+void inputHdlcClose(void);
+
+//=========================== public ==========================================
+
 void openserial_init(void) {
    // uint16_t crc;
 
@@ -76,9 +76,9 @@ void openserial_init(void) {
    // // set callbacks
    // uart_setCallbacks(isr_openserial_tx,
    //                   isr_openserial_rx);
-}
-
-owerror_t openserial_printStatus(uint8_t statusElement,uint8_t* buffer, uint8_t length) {
+}
+
+owerror_t openserial_printStatus(uint8_t statusElement,uint8_t* buffer, uint8_t length) {
    // uint8_t i;
    // INTERRUPT_DECLARATION();
 
@@ -94,17 +94,17 @@ owerror_t openserial_printStatus(uint8_t statusElement,uint8_t* buffer, uint8_t
    // }
    // outputHdlcClose();
    // ENABLE_INTERRUPTS();
-   
-   return E_SUCCESS;
-}
-
-owerror_t openserial_printInfoErrorCritical(
-      char             severity,
-      uint8_t          calling_component,
-      uint8_t          error_code,
-      errorparameter_t arg1,
-      errorparameter_t arg2
-   ) {
+
+   return E_SUCCESS;
+}
+
+owerror_t openserial_printInfoErrorCritical(
+      char             severity,
+      uint8_t          calling_component,
+      uint8_t          error_code,
+      errorparameter_t arg1,
+      errorparameter_t arg2
+   ) {
    // INTERRUPT_DECLARATION();
 
    // DISABLE_INTERRUPTS();
@@ -121,11 +121,11 @@ owerror_t openserial_printInfoErrorCritical(
    // outputHdlcWrite((uint8_t) (arg2 & 0x00ff));
    // outputHdlcClose();
    // ENABLE_INTERRUPTS();
-   
-   return E_SUCCESS;
-}
-
-owerror_t openserial_printData(uint8_t* buffer, uint8_t length) {
+
+   return E_SUCCESS;
+}
+
+owerror_t openserial_printData(uint8_t* buffer, uint8_t length) {
    // uint8_t  i;
    // uint8_t  asn[5];
    // INTERRUPT_DECLARATION();
@@ -149,70 +149,70 @@ owerror_t openserial_printData(uint8_t* buffer, uint8_t length) {
    // }
    // outputHdlcClose();
    // ENABLE_INTERRUPTS();
-   
-   return E_SUCCESS;
-}
-
-owerror_t openserial_printInfo(uint8_t calling_component, uint8_t error_code,
-                              errorparameter_t arg1,
-                              errorparameter_t arg2) {
-   return openserial_printInfoErrorCritical(
-      SERFRAME_MOTE2PC_INFO,
-      calling_component,
-      error_code,
-      arg1,
-      arg2
-   );
-}
-
-owerror_t openserial_printError(uint8_t calling_component, uint8_t error_code,
-                              errorparameter_t arg1,
-                              errorparameter_t arg2) {
-   // blink error LED, this is serious
+
+   return E_SUCCESS;
+}
+
+owerror_t openserial_printInfo(uint8_t calling_component, uint8_t error_code,
+                              errorparameter_t arg1,
+                              errorparameter_t arg2) {
+   return openserial_printInfoErrorCritical(
+      SERFRAME_MOTE2PC_INFO,
+      calling_component,
+      error_code,
+      arg1,
+      arg2
+   );
+}
+
+owerror_t openserial_printError(uint8_t calling_component, uint8_t error_code,
+                              errorparameter_t arg1,
+                              errorparameter_t arg2) {
+   // blink error LED, this is serious
    // leds_error_toggle();
-   
-   return openserial_printInfoErrorCritical(
-      SERFRAME_MOTE2PC_ERROR,
-      calling_component,
-      error_code,
-      arg1,
-      arg2
-   );
-}
-
-owerror_t openserial_printCritical(uint8_t calling_component, uint8_t error_code,
-                              errorparameter_t arg1,
-                              errorparameter_t arg2) {
-   // blink error LED, this is serious
+
+   return openserial_printInfoErrorCritical(
+      SERFRAME_MOTE2PC_ERROR,
+      calling_component,
+      error_code,
+      arg1,
+      arg2
+   );
+}
+
+owerror_t openserial_printCritical(uint8_t calling_component, uint8_t error_code,
+                              errorparameter_t arg1,
+                              errorparameter_t arg2) {
+   // blink error LED, this is serious
    // leds_error_blink();
-   
+
    // // schedule for the mote to reboot in 10s
    // opentimers_start(10000,
    //                  TIMER_ONESHOT,TIME_MS,
    //                  board_reset);
-   
-   return openserial_printInfoErrorCritical(
-      SERFRAME_MOTE2PC_CRITICAL,
-      calling_component,
-      error_code,
-      arg1,
-      arg2
-   );
-}
-
+
+   return openserial_printInfoErrorCritical(
+      SERFRAME_MOTE2PC_CRITICAL,
+      calling_component,
+      error_code,
+      arg1,
+      arg2
+   );
+}
+
 uint8_t openserial_getNumDataBytes(void) {
-   uint8_t inputBufFill;
+   uint8_t inputBufFill = 0;
    // INTERRUPT_DECLARATION();
-   
+
    // DISABLE_INTERRUPTS();
    // inputBufFill = openserial_vars.inputBufFill;
    // ENABLE_INTERRUPTS();
-
-   return inputBufFill-1; // removing the command byte
-}
-
-uint8_t openserial_getInputBuffer(uint8_t* bufferToWrite, uint8_t maxNumBytes) {
-   uint8_t numBytesWritten;
+
+   return inputBufFill-1; // removing the command byte
+}
+
+uint8_t openserial_getInputBuffer(uint8_t* bufferToWrite, uint8_t maxNumBytes) {
+   uint8_t numBytesWritten = 0;
    // uint8_t inputBufFill;
    // INTERRUPT_DECLARATION();
 
@@ -229,10 +229,10 @@ uint8_t openserial_getInputBuffer(uint8_t* bufferToWrite, uint8_t maxNumBytes) {
    //    numBytesWritten = inputBufFill-1;
    //    memcpy(bufferToWrite,&(openserial_vars.inputBuf[1]),numBytesWritten);
    // }
-   
-   return numBytesWritten;
-}
-
+
+   return numBytesWritten;
+}
+
 void openserial_startInput(void) {
 //    INTERRUPT_DECLARATION();
 
@@ -263,8 +263,8 @@ void openserial_startInput(void) {
 //    uart_writeByte(openserial_vars.reqFrame[openserial_vars.reqFrameIdx]);
 // #endif
 //    ENABLE_INTERRUPTS();
-}
-
+}
+
 void openserial_startOutput(void) {
 //    //schedule a task to get new status in the output buffer
 //    uint8_t debugPrintCounter;
@@ -347,8 +347,8 @@ void openserial_startOutput(void) {
 //       openserial_stop();
 //    }
 //    ENABLE_INTERRUPTS();
-}
-
+}
+
 void openserial_stop(void) {
    // uint8_t inputBufFill;
    // uint8_t cmdByte;
@@ -405,16 +405,16 @@ void openserial_stop(void) {
    // openserial_vars.inputBufFill  = 0;
    // openserial_vars.busyReceiving = FALSE;
    // ENABLE_INTERRUPTS();
-}
-
-/**
-\brief Trigger this module to print status information, over serial.
-
-debugPrint_* functions are used by the openserial module to continuously print
-status information about several modules in the OpenWSN stack.
-
-\returns TRUE if this function printed something, FALSE otherwise.
-*/
+}
+
+/**
+\brief Trigger this module to print status information, over serial.
+
+debugPrint_* functions are used by the openserial module to continuously print
+status information about several modules in the OpenWSN stack.
+
+\returns TRUE if this function printed something, FALSE otherwise.
+*/
 bool debugPrint_outBufferIndexes(void) {
    // uint16_t temp_buffer[2];
    // INTERRUPT_DECLARATION();
@@ -423,72 +423,72 @@ bool debugPrint_outBufferIndexes(void) {
    // temp_buffer[1] = openserial_vars.outputBufIdxR;
    // ENABLE_INTERRUPTS();
    // openserial_printStatus(STATUS_OUTBUFFERINDEXES,(uint8_t*)temp_buffer,sizeof(temp_buffer));
-   return TRUE;
-}
-
-//=========================== private =========================================
-
-//===== hdlc (output)
-
-/**
-\brief Start an HDLC frame in the output buffer.
-*/
+   return TRUE;
+}
+
+//=========================== private =========================================
+
+//===== hdlc (output)
+
+/**
+\brief Start an HDLC frame in the output buffer.
+*/
 port_INLINE void outputHdlcOpen(void) {
    // // initialize the value of the CRC
    // openserial_vars.outputCrc                          = HDLC_CRCINIT;
-   
+
    // // write the opening HDLC flag
    // openserial_vars.outputBuf[openserial_vars.outputBufIdxW++]     = HDLC_FLAG;
-}
-/**
-\brief Add a byte to the outgoing HDLC frame being built.
-*/
-port_INLINE void outputHdlcWrite(uint8_t b) {
-   
+}
+/**
+\brief Add a byte to the outgoing HDLC frame being built.
+*/
+port_INLINE void outputHdlcWrite(uint8_t b) {
+
    // // iterate through CRC calculator
    // openserial_vars.outputCrc = crcIteration(openserial_vars.outputCrc,b);
-   
+
    // // add byte to buffer
    // if (b==HDLC_FLAG || b==HDLC_ESCAPE) {
    //    openserial_vars.outputBuf[openserial_vars.outputBufIdxW++]  = HDLC_ESCAPE;
    //    b                                               = b^HDLC_ESCAPE_MASK;
    // }
    // openserial_vars.outputBuf[openserial_vars.outputBufIdxW++]     = b;
-   
-}
-/**
-\brief Finalize the outgoing HDLC frame.
-*/
+
+}
+/**
+\brief Finalize the outgoing HDLC frame.
+*/
 port_INLINE void outputHdlcClose(void) {
    // uint16_t   finalCrc;
-    
+
    // // finalize the calculation of the CRC
    // finalCrc   = ~openserial_vars.outputCrc;
-   
+
    // // write the CRC value
    // outputHdlcWrite((finalCrc>>0)&0xff);
    // outputHdlcWrite((finalCrc>>8)&0xff);
-   
+
    // // write the closing HDLC flag
    // openserial_vars.outputBuf[openserial_vars.outputBufIdxW++]   = HDLC_FLAG;
-}
-
-//===== hdlc (input)
-
-/**
-\brief Start an HDLC frame in the input buffer.
-*/
+}
+
+//===== hdlc (input)
+
+/**
+\brief Start an HDLC frame in the input buffer.
+*/
 port_INLINE void inputHdlcOpen(void) {
    // // reset the input buffer index
    // openserial_vars.inputBufFill                       = 0;
-   
+
    // // initialize the value of the CRC
    // openserial_vars.inputCrc                           = HDLC_CRCINIT;
-}
-/**
-\brief Add a byte to the incoming HDLC frame.
-*/
-port_INLINE void inputHdlcWrite(uint8_t b) {
+}
+/**
+\brief Add a byte to the incoming HDLC frame.
+*/
+port_INLINE void inputHdlcWrite(uint8_t b) {
    // if (b==HDLC_ESCAPE) {
    //    openserial_vars.inputEscaping = TRUE;
    // } else {
@@ -496,37 +496,37 @@ port_INLINE void inputHdlcWrite(uint8_t b) {
    //       b                             = b^HDLC_ESCAPE_MASK;
    //       openserial_vars.inputEscaping = FALSE;
    //    }
-      
+
    //    // add byte to input buffer
    //    openserial_vars.inputBuf[openserial_vars.inputBufFill] = b;
    //    openserial_vars.inputBufFill++;
-      
+
    //    // iterate through CRC calculator
    //    openserial_vars.inputCrc = crcIteration(openserial_vars.inputCrc,b);
    // }
-}
-/**
-\brief Finalize the incoming HDLC frame.
-*/
+}
+/**
+\brief Finalize the incoming HDLC frame.
+*/
 port_INLINE void inputHdlcClose(void) {
-   
+
    // // verify the validity of the frame
    // if (openserial_vars.inputCrc==HDLC_CRCGOOD) {
    //    // the CRC is correct
-      
+
    //    // remove the CRC from the input buffer
    //    openserial_vars.inputBufFill    -= 2;
    // } else {
    //    // the CRC is incorrect
-      
+
    //    // drop the incoming fram
    //    openserial_vars.inputBufFill     = 0;
    // }
-}
-
-//=========================== interrupt handlers ==============================
-
-//executed in ISR, called from scheduler.c
+}
+
+//=========================== interrupt handlers ==============================
+
+//executed in ISR, called from scheduler.c
 void isr_openserial_tx(void) {
    // switch (openserial_vars.mode) {
    //    case MODE_INPUT:
@@ -547,9 +547,9 @@ void isr_openserial_tx(void) {
    //    default:
    //       break;
    // }
-}
-
-// executed in ISR, called from scheduler.c
+}
+
+// executed in ISR, called from scheduler.c
 void isr_openserial_rx(void) {
    // uint8_t rxbyte;
    // uint8_t inputBufFill;
@@ -570,13 +570,13 @@ void isr_openserial_rx(void) {
    //              rxbyte!=HDLC_FLAG
    //            ) {
    //    // start of frame
-      
+
    //    // I'm now receiving
    //    openserial_vars.busyReceiving         = TRUE;
-      
+
    //    // create the HDLC frame
    //    inputHdlcOpen();
-      
+
    //    // add the byte just received
    //    inputHdlcWrite(rxbyte);
    // } else if (
@@ -584,7 +584,7 @@ void isr_openserial_rx(void) {
    //              rxbyte!=HDLC_FLAG
    //           ) {
    //    // middle of frame
-      
+
    //    // add the byte just received
    //    inputHdlcWrite(rxbyte);
    //    if (openserial_vars.inputBufFill+1>SERIAL_INPUT_BUFFER_SIZE){
@@ -601,28 +601,28 @@ void isr_openserial_rx(void) {
    //              rxbyte==HDLC_FLAG
    //            ) {
    //       // end of frame
-         
+
    //       // finalize the HDLC frame
    //       inputHdlcClose();
-         
+
    //       if (openserial_vars.inputBufFill==0){
    //          // invalid HDLC frame
    //          openserial_printError(COMPONENT_OPENSERIAL,ERR_WRONG_CRC_INPUT,
    //                                (errorparameter_t)inputBufFill,
    //                                (errorparameter_t)0);
-         
+
    //       }
-         
+
    //       openserial_vars.busyReceiving      = FALSE;
    //       openserial_stop();
    // }
-   
+
    // openserial_vars.lastRxByte = rxbyte;
-}
-
-//======== SERIAL ECHO =============
-
-void openserial_echo(uint8_t* buf, uint8_t bufLen){
+}
+
+//======== SERIAL ECHO =============
+
+void openserial_echo(uint8_t* buf, uint8_t bufLen){
    // INTERRUPT_DECLARATION();
    // // echo back what you received
    // openserial_printData(
@@ -633,4 +633,4 @@ void openserial_echo(uint8_t* buf, uint8_t bufLen){
    //  DISABLE_INTERRUPTS();
    //  openserial_vars.inputBufFill = 0;
    //  ENABLE_INTERRUPTS();
-}
+}
